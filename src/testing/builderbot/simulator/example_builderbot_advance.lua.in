assert(loadfile("@CMAKE_INSTALL_PREFIX@/share/argos3/plugins/robots/builderbot/control_interface/lua/init.lua"))()

local data -- make data global for debug so that it can be seen in lua_editor
local behavior

local rules = {
   selection_method = 'nearest_win',
   list = {
      -- pickup a type 5 block when the builderbot senses a wall behind itself
      {
         rule_type = 'pickup',
         external_condition = "wall_side",
         structure = {
            {
               index = vector3(0, 0, 0),
               type = 5
            },
         },
         target = {
            reference_index = vector3(0, 0, 0),
            offset_from_reference = vector3(0, 0, 0),
         },
      },
   }, -- end of rule.list
} -- end of rules

local function customize_block_type(block)
   -- define type 5 as a block with a pink up face and an orange front face
   if block.tags.up ~= nil and block.tags.up.type == 1 and 
      block.tags.front ~= nil and block.tags.front.type == 2 then
      return 5
   end
end

local function customize_external_condition()
   -- defind a "wall_side" condition if the the robot senses something on the back
   if robot.rangefinders["9"].proximity < robot.api.parameters.proximity_detect_tolerance and
      robot.rangefinders["10"].proximity < robot.api.parameters.proximity_detect_tolerance then
      return "wall_side"
   end
end

function init()  
   robot.logger:register_module("controller")
   robot.logger:set_verbosity(2) 
   -- enable the robot's camera system  
   robot.camera_system.enable()
   reset()
end

function reset()
   data = {
      target = {},
      blocks = {},
      obstacles = {},
   }
   behavior = robot.utils.behavior_tree.create {
      type = "sequence*",
      children = {
         robot.nodes.create_pick_up_behavior_node(data, rules),
         robot.nodes.create_place_behavior_node(data, rules),
      }
   }
end

function step()
   -- preprocessing
   robot.api.process_blocks(data.blocks)
   robot.api.process_leds(data.blocks, customize_block_type)
   robot.api.process_obstacles(data.obstacles, data.blocks)
   data.external_condition = customize_external_condition()
   -- tick behavior tree
   behavior()
   -- debug
   if data.blocks[data.target.id] ~= nil then
      robot.utils.draw.arrow("green", 
                             vector3(0,0,robot.api.constants.block_side_length / 2), 
                             data.blocks[data.target.id].position_robot
                            )
   end
end

function destroy()
   -- disable the robot's camera system
   robot.camera_system.disable()
end
